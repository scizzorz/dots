#!/usr/bin/env zsh

MAJOR_VERSION=0
MINOR_VERSION=1
PATCH_VERSION=0
VERSION="${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION}"

# github.com/square/exit
OK=0
NotOK=1
UsageError=80
UnknownSubcommand=81
RequirementNotMet=82
Forbidden=83
MovedPermanently=84
InternalError=100
Unavailable=101

C_RED='\033[31m'
C_GREEN='\033[32m'
C_YELLOW='\033[33m'
C_BLUE='\033[34m'
C_MAGENTA='\033[35m'
C_RESET='\033[0m'

# strip color if the output of this command isn't a terminal
if [ ! -t 1 ]; then
  C_RED=''
  C_GREEN=''
  C_YELLOW=''
  C_BLUE=''
  C_MAGENTA=''
  C_RESET=''
fi

# these are used for user-facing output
ERROR="${C_RED}✗${C_RESET}"
INFO="${C_YELLOW}!${C_RESET}"
SUCCESS="${C_GREEN}✓${C_RESET}"
QUESTION="${C_MAGENTA}?${C_RESET}"
SUGGESTION="${C_MAGENTA}!${C_RESET}"

SELF="$0"
COMMA_PATH=${COMMA_PATH:-./comma}
SEARCH_PATHS=(${(s/:/)COMMA_PATH})
SHOW_COMPLETION=no
ARGS=()

show_version() {
  echo "comma ${VERSION}"
}

show_help() {
  cat << USAGE
comma - Script snippet gizmo

Usage:  comma [...]

comma is a tool to help remember semi-frequently used commands and scripts.
That is, things you need to run regularly but not frequently enough to actually
memorize.

Comma treats its arguments as a series of subcommands that correspond to a
nested directory structure somewhere in \$COMMA_PATH. That is, running \`comma
foo bar\` will search all directories in \$COMMA_PATH for a \`foo/bar\` script,
then execute it. Additional arguments are allowed.

Command options:
  -h, --help      Show this help text.
  -v, --version   Show comma version.
USAGE
}

if [[ "$#" -eq 0 ]]; then
  echo "${ERROR} Usage: ${SELF} <command>"
  exit $UsageError
fi

while [[ "$#" -gt 0 ]]; do
  if [[ "$1" == "--help" ]] || [[ "$1" == "-h" ]]; then
    show_help
    exit $OK
  elif [[ "$1" == "--version" ]] || [[ "$1" == "-v" ]]; then
    show_version
    exit $OK
  elif [[ "$1" == "--completion" ]]; then
    SHOW_COMPLETION=yes
  else
    ARGS+="$1"
  fi
  shift
done

exec_path=""
script_path=""
deepest_found_path=""
do_complete="yes"

while [[ "${#ARGS}" -gt 0 ]]; do
  if [[ -z "${script_path}" ]]; then
    script_path="${ARGS[1]}"
  else
    script_path="${script_path}/${ARGS[1]}"
  fi

  shift ARGS
  for dir in $SEARCH_PATHS; do
    if [[ -d "${dir}/${script_path}" ]]; then
      # echo "${INFO} Found pack at ${dir}/${script_path}"
      deepest_found_path="${script_path}"
      continue 2
    elif [[ -x "${dir}/${script_path}" ]]; then
      # echo "${INFO} Found script at ${exec_path}"
      if [[ "${SHOW_COMPLETION}" == "yes" ]]; then
        do_complete="no"
      fi
      exec_path="${dir}/${script_path}"
      break 2
    elif [[ -f "${dir}/${script_path}" ]]; then
      if [[ "${SHOW_COMPLETION}" == "yes" ]]; then
        do_complete="no"
      else
        echo "${ERROR} Found script at ${C_YELLOW}${dir}/${script_path}${C_RESET} but it's not executable."
        echo "${SUGGESTION} Try running ${C_BLUE}chmod +x ${dir}/${script_path}${C_RESET}"
        exit $RequirementNotMet
      fi
    fi
  done
done

if [[ "${SHOW_COMPLETION}" == "yes" ]]; then
  if [[ "${do_complete}" == "yes" ]]; then
    for dir in $SEARCH_PATHS; do
      if [[ -d "${dir}/${deepest_found_path}" ]]; then
        /usr/bin/env ls "${dir}/${deepest_found_path}"
      fi
    done
  fi
  exit $OK
fi

if [[ -z "${exec_path}" ]]; then
  echo "${ERROR} Unable to find a script for ${C_YELLOW}${script_path}${C_RESET}"
  echo "  Searched:"
  for dir in $SEARCH_PATHS; do
    echo "    ${C_YELLOW}${dir}${C_RESET}"
  done
  exit $UsageError
fi

exec "${exec_path}" ${ARGS[@]}
